name: "Deployment"

on:
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  GO_VERSION: 1.16

jobs:
  build:
    name: Build the container image
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to Github Action
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            GO_VERSION=${{ env.GO_VERSION }}

  deploy:
    name: Deploy the container bot
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy the container bot
        uses: appleboy/ssh-action@master
        env:
          CONTAINER_NAME: ticker-bot-fuiyoo
          CONFIG_VOLUME: crypto-discord-bot-config
          PRODUCTION_CONFIG: '${{ secrets.PRODUCTION_CONFIG }}'
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USERNAME }}
          port: ${{ secrets.PRODUCTION_SSH_PORT }}
          key: ${{ secrets.PRODUCTION_PRIVATE_KEY }}
          script: |
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io --username ${{ github.actor }} --password-stdin
            docker stop ${{ env.CONTAINER_NAME }} || true && docker rm ${{ env.CONTAINER_NAME }} || true
            docker volume create ${{ env.CONFIG_VOLUME }}
            docker run --rm -v crypto-discord-bot-config:/config -e APP_CONFIG='${{ env.PRODUCTION_CONFIG }}' busybox sh -c 'echo "$APP_CONFIG" > /config/config.json'
            docker pull ${{ needs.build.outputs.tag }}
            docker run -d -v ${{ env.CONFIG_VOLUME }}:/config --name ${{ env.CONTAINER_NAME }} ${{ needs.build.outputs.tag }}
