name: "Build and smoke test container"

on:
  workflow_run:
    workflows: ["Run Unit Test"]
    types:
      - completed
    
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  GO_VERSION: 1.16

jobs:
  build:
    name: Build the container image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to Github Action
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            GO_VERSION=${{ env.GO_VERSION }}
      - name: Smoke test the container
        env:
          CONTAINER_NAME: ticker-bot-fuiyoo-test
          CONFIG_VOLUME: crypto-discord-bot-config-test
          TEST_CONFIG: '${{ secrets.TEST_CONFIG }}'
        run: |
          docker volume create ${{ env.CONFIG_VOLUME }}
          docker run --rm -v crypto-discord-bot-config:/config -e APP_CONFIG='${{ env.TEST_CONFIG }}' busybox sh -c 'echo "$APP_CONFIG" > /config/config.json'
          docker pull ${{ steps.meta.outputs.tags }}
          docker run -d -v ${{ env.CONFIG_VOLUME }}:/config --name ${{ env.CONTAINER_NAME }} ${{ steps.meta.outputs.tags }}
          docker ps | grep  ${{ env.CONTAINER_NAME }}
          if [ "$( docker container inspect -f '{{.State.Running}}'  ${{ env.CONTAINER_NAME }} )" == "true" ]; then 
            echo "Docker container test is running, deleting and stopping the container"
            docker stop ${{ env.CONTAINER_NAME }} && docker rm ${{ env.CONTAINER_NAME }}
          fi